<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Kernel - 标签 - Niebelungen</title>
        <link>http://example.org/tags/kernel/</link>
        <description>Kernel - 标签 - Niebelungen</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 18 Oct 2023 20:15:28 &#43;0800</lastBuildDate><atom:link href="http://example.org/tags/kernel/" rel="self" type="application/rss+xml" /><item>
    <title>2023 巅峰极客初赛 mmsg 出题记录</title>
    <link>http://example.org/mmsg-author-note/</link>
    <pubDate>Wed, 18 Oct 2023 20:15:28 &#43;0800</pubDate><author>
        <name>Niebelungen</name>
    </author><guid>http://example.org/mmsg-author-note/</guid>
    <description><![CDATA[2023 巅峰极客 初赛 mmsg 出题记录迟到的writeup，先给各位大佬道个歉，笔者是个菜鸡而且第一次出内核题，结果出了非预期。（给大家磕头了 预期思路下面]]></description>
</item><item>
    <title>Idek2023 Sofire=good</title>
    <link>http://example.org/idek2023-sofiregood/</link>
    <pubDate>Mon, 16 Jan 2023 08:58:12 &#43;0800</pubDate><author>
        <name>Niebelungen</name>
    </author><guid>http://example.org/idek2023-sofiregood/</guid>
    <description><![CDATA[Idek2023 Sofire=goodDescription:
Author:sofire=bad#6525
Solfire from PicoCTF2021 was too hard so I decided to create my own version in the kernel instead of the blockchain. Now sofire=good not bad Author&rsquo;s note: Kernel Pwn
7 solves / 497 points
AnalysisWith the help of the source code it is easy to figure out the program. This is just a kernel heap challenge and has no business of blockchain. chall.ko has four functions as follows.]]></description>
</item><item>
    <title>HITCON2020 Spark</title>
    <link>http://example.org/hitcon2020-spark/</link>
    <pubDate>Fri, 08 Apr 2022 22:36:49 &#43;0800</pubDate><author>
        <name>Niebelungen</name>
    </author><guid>http://example.org/hitcon2020-spark/</guid>
    <description><![CDATA[HITCON 2020 - Spark这是一个比较老的题目，似乎当时做出来的人并不是很多。 分析题目给出了一个demo，用来告诉我们如何使用内核模块 spark.ko 。简单来看，它]]></description>
</item><item>
    <title>CorCTF2021 Msg_msg</title>
    <link>http://example.org/corctf2021-msg_msg/</link>
    <pubDate>Fri, 18 Mar 2022 16:09:07 &#43;0800</pubDate><author>
        <name>Niebelungen</name>
    </author><guid>http://example.org/corctf2021-msg_msg/</guid>
    <description><![CDATA[corCTF2021-msg_msg在D^3CTF2022中的d3kheap，看上去是比较简单的一道题目，我（A Linux kernel newbie）一直苦于如]]></description>
</item><item>
    <title>SECCON2021-kone_gadget</title>
    <link>http://example.org/seccon2021-kone-gadget/</link>
    <pubDate>Fri, 21 Jan 2022 02:54:45 &#43;0800</pubDate><author>
        <name>Niebelungen</name>
    </author><guid>http://example.org/seccon2021-kone-gadget/</guid>
    <description><![CDATA[kone_gadgetAdded to arch/x86/entry/syscalls/syscall_64.tbl 1 1337 64 seccon sys_seccon Added to kernel/sys.c: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 SYSCALL_DEFINE1(seccon, unsigned long, rip) { asm volatile(&#34;xor %%edx, %%edx;&#34; &#34;xor %%ebx, %%ebx;&#34; &#34;xor %%ecx, %%ecx;&#34; &#34;xor %%edi, %%edi;&#34; &#34;xor %%esi, %%esi;&#34; &#34;xor %%r8d, %%r8d;&#34; &#34;xor %%r9d, %%r9d;&#34; &#34;xor %%r10d, %%r10d;&#34; &#34;xor %%r11d, %%r11d;&#34; &#34;xor %%r12d, %%r12d;&#34; &#34;xor]]></description>
</item><item>
    <title>eebpf-Tokyowesterns CTF 2020</title>
    <link>http://example.org/eebpf-tokyowesterns-ctf-2020/</link>
    <pubDate>Mon, 17 Jan 2022 17:53:03 &#43;0800</pubDate><author>
        <name>Niebelungen</name>
    </author><guid>http://example.org/eebpf-tokyowesterns-ctf-2020/</guid>
    <description><![CDATA[eebpf一道来自Tokyowesterns CTF 2020的内核题目。在做题之前，需要学习ebpf的相关知识。这里有一篇我的笔记。 Bug题目pa]]></description>
</item><item>
    <title>MidnightSun2018-filpbit</title>
    <link>http://example.org/midnightsun2018-filpbit/</link>
    <pubDate>Mon, 17 Jan 2022 17:52:11 &#43;0800</pubDate><author>
        <name>Niebelungen</name>
    </author><guid>http://example.org/midnightsun2018-filpbit/</guid>
    <description><![CDATA[filpbit源码提供： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include &lt;linux/kernel.h&gt;#include &lt;linux/init.h&gt;#include &lt;linux/sched.h&gt;#include &lt;linux/syscalls.h&gt; #define MAXFLIT 1 #ifndef __NR_FLITBIP #define FLITBIP 333 #endif long flit_count = 0; EXPORT_SYMBOL(flit_count); SYSCALL_DEFINE2(flitbip, long *, addr, long, bit) { if (flit_count &gt;= MAXFLIT) {]]></description>
</item><item>
    <title>SECCON2020-kstack</title>
    <link>http://example.org/seccon2020-kstack/</link>
    <pubDate>Mon, 17 Jan 2022 17:50:55 &#43;0800</pubDate><author>
        <name>Niebelungen</name>
    </author><guid>http://example.org/seccon2020-kstack/</guid>
    <description><![CDATA[Kstack这个题目同样提供了源码。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 typedef struct _Element { int owner;]]></description>
</item><item>
    <title>TSGCTF2021-lkgit(userfaultfd)</title>
    <link>http://example.org/tsgctf2021-lkgit-userfaultfd/</link>
    <pubDate>Mon, 17 Jan 2022 17:49:07 &#43;0800</pubDate><author>
        <name>Niebelungen</name>
    </author><guid>http://example.org/tsgctf2021-lkgit-userfaultfd/</guid>
    <description><![CDATA[userfaultfduserfaultfd，这是 kernel 中提供的一种特殊的处理 page fault 的机制，能够让用户态程序自行处理自己的 page fault. 它的调用方式是通过一]]></description>
</item><item>
    <title>Linux Kernel-Pwn Learning</title>
    <link>http://example.org/linuxkernel-pwn-learning/</link>
    <pubDate>Sun, 22 Aug 2021 01:04:36 &#43;0800</pubDate><author>
        <name>Niebelungen</name>
    </author><guid>http://example.org/linuxkernel-pwn-learning/</guid>
    <description><![CDATA[Kernel ROP学习Linux kernel Pwn的第一次尝试，hxp2020: kernel-rop Thanks @Midas for so great tutorials ! 环境设置将附件解压得到以下文件： initramfs.cpio.g]]></description>
</item></channel>
</rss>
